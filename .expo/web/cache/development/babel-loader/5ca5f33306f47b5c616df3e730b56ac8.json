{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\ne nyuk\\xE1lj\\\\ELTE\\\\mobil\\\\DiceRoller\\\\src\\\\tmpScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nvar modifier = 0;\nvar targetNumber = 0;\n\nvar DieRollScreen = function (_Component) {\n  _inherits(DieRollScreen, _Component);\n\n  var _super = _createSuper(DieRollScreen);\n\n  function DieRollScreen() {\n    _classCallCheck(this, DieRollScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DieRollScreen, [{\n    key: \"render\",\n    value: function render() {\n      var navigate = this.props.navigation.navigate;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 7\n        }\n      }, React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 9\n        }\n      }, \"fa\"));\n    }\n  }]);\n\n  return DieRollScreen;\n}(Component);\n\nDieRollScreen.navigationOptions = {\n  title: 'PathFinder'\n};\nexport { DieRollScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#FDF1DC',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  textInputStyle: {\n    width: 250,\n    backgroundColor: 'white',\n    padding: 16\n  },\n  buttonStyle: {\n    margin: '10px'\n  }\n});\n\nfunction calculate() {\n  var result;\n  var rollResult = Math.floor(Math.random() * 20) + 1;\n\n  if (parseInt(rollResult) + parseInt(modifier) < parseInt(targetNumber)) {\n    if (parseInt(targetNumber) - (parseInt(rollResult) + parseInt(modifier)) >= 10) {\n      result = 0;\n    } else {\n      result = 1;\n    }\n  }\n\n  if (parseInt(rollResult) + parseInt(modifier) >= parseInt(targetNumber)) {\n    if (parseInt(rollResult) + parseInt(modifier) - parseInt(targetNumber) >= 10) {\n      result = 3;\n    } else {\n      result = 2;\n    }\n  }\n\n  if (rollResult == 20) {\n    if (result < 3) {\n      result++;\n    }\n  }\n\n  if (rollResult == 1) {\n    if (result > 0) {\n      result--;\n    }\n  }\n\n  var resultArray = new Array('Critical failure', 'Failure', 'Success', 'Critical success');\n  return \"Targetnumber:\" + targetNumber + \" result of the roll: \" + rollResult + \"+\" + modifier + \"=\" + (parseInt(rollResult) + parseInt(modifier)) + \" \" + resultArray[result];\n}","map":{"version":3,"sources":["D:/ne nyuk√°lj/ELTE/mobil/DiceRoller/src/tmpScreen.js"],"names":["React","Component","modifier","targetNumber","DieRollScreen","navigate","props","navigation","styles","container","navigationOptions","title","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","textInputStyle","width","padding","buttonStyle","margin","calculate","result","rollResult","Math","floor","random","parseInt","resultArray","Array"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;AAGA,IAAIC,QAAQ,GAAC,CAAb;AACA,IAAIC,YAAY,GAAC,CAAjB;;IAEqBC,a;;;;;;;;;;;;;6BAIR;AAAA,UACAC,QADA,GACY,KAAKC,KAAL,CAAWC,UADvB,CACAF,QADA;AAEP,aACA,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CADA;AAKD;;;;EAXsCR,S;;AAAtBG,a,CACVM,iB,GAAoB;AACzBC,EAAAA,KAAK,EAAE;AADkB,C;SADVP,a;AAenB,IAAMI,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,SAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BC,EAAAA,cAAc,EAAE;AACdC,IAAAA,KAAK,EAAE,GADO;AAEdJ,IAAAA,eAAe,EAAE,OAFH;AAGdK,IAAAA,OAAO,EAAE;AAHK,GAPe;AAa/BC,EAAAA,WAAW,EAAC;AACVC,IAAAA,MAAM,EAAE;AADE;AAbmB,CAAlB,CAAf;;AAkBA,SAASC,SAAT,GACA;AACE,MAAIC,MAAJ;AACA,MAAIC,UAAU,GAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAA+B,CAA9C;;AACA,MAAIC,QAAQ,CAACJ,UAAD,CAAR,GAAqBI,QAAQ,CAAC3B,QAAD,CAA9B,GAA0C2B,QAAQ,CAAC1B,YAAD,CAArD,EACA;AACI,QAAG0B,QAAQ,CAAC1B,YAAD,CAAR,IAAwB0B,QAAQ,CAACJ,UAAD,CAAR,GAAqBI,QAAQ,CAAC3B,QAAD,CAArD,KAAkE,EAArE,EACA;AACIsB,MAAAA,MAAM,GAAC,CAAP;AACH,KAHD,MAKA;AACIA,MAAAA,MAAM,GAAC,CAAP;AACH;AACJ;;AACD,MAAIK,QAAQ,CAACJ,UAAD,CAAR,GAAqBI,QAAQ,CAAC3B,QAAD,CAA9B,IAA2C2B,QAAQ,CAAC1B,YAAD,CAAtD,EACA;AACI,QAAI0B,QAAQ,CAACJ,UAAD,CAAR,GAAqBI,QAAQ,CAAC3B,QAAD,CAA9B,GAA0C2B,QAAQ,CAAC1B,YAAD,CAAlD,IAAkE,EAArE,EACA;AACIqB,MAAAA,MAAM,GAAC,CAAP;AACH,KAHD,MAKA;AACIA,MAAAA,MAAM,GAAC,CAAP;AACH;AACJ;;AACD,MAAGC,UAAU,IAAE,EAAf,EACA;AACI,QAAGD,MAAM,GAAC,CAAV,EACA;AACIA,MAAAA,MAAM;AACT;AACJ;;AACD,MAAGC,UAAU,IAAE,CAAf,EACA;AACI,QAAGD,MAAM,GAAC,CAAV,EACA;AACIA,MAAAA,MAAM;AACT;AACJ;;AACD,MAAIM,WAAW,GAAG,IAAIC,KAAJ,CAAU,kBAAV,EAA8B,SAA9B,EAAwC,SAAxC,EAAkD,kBAAlD,CAAlB;AACA,SAAO,kBAAkB5B,YAAlB,GAA+B,uBAA/B,GAAuDsB,UAAvD,GAAmE,GAAnE,GAAyEvB,QAAzE,GAAoF,GAApF,IAA2F2B,QAAQ,CAACJ,UAAD,CAAR,GAAqBI,QAAQ,CAAC3B,QAAD,CAAxH,IAAsI,GAAtI,GAA4I4B,WAAW,CAACN,MAAD,CAA9J;AACD","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, View, StyleSheet, TextInput  } from \"react-native\";\r\n\r\nlet modifier=0;\r\nlet targetNumber=0;\r\n\r\nexport default class DieRollScreen extends Component {\r\n    static navigationOptions = {\r\n      title: 'PathFinder',\r\n    };\r\n    render() {\r\n      const {navigate} = this.props.navigation;\r\n      return (\r\n      <View style={styles.container}>\r\n        <p>fa</p>\r\n      </View>\r\n      );\r\n    }\r\n  }\r\n\r\n  \r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#FDF1DC',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    textInputStyle: {\r\n      width: 250,\r\n      backgroundColor: 'white',\r\n      padding: 16,\r\n      \r\n    },\r\n    buttonStyle:{\r\n      margin: '10px'\r\n    }\r\n  });\r\n\r\n  function calculate() \r\n  {\r\n    let result;\r\n    let rollResult=Math.floor(Math.random() * 20)+1\r\n    if((parseInt(rollResult)+parseInt(modifier))<parseInt(targetNumber))\r\n    {\r\n        if(parseInt(targetNumber)-(parseInt(rollResult)+parseInt(modifier))>=10)\r\n        {\r\n            result=0;\r\n        }\r\n        else\r\n        {\r\n            result=1;\r\n        }\r\n    }\r\n    if((parseInt(rollResult)+parseInt(modifier))>=parseInt(targetNumber))\r\n    {\r\n        if((parseInt(rollResult)+parseInt(modifier))-parseInt(targetNumber)>=10)\r\n        {\r\n            result=3;\r\n        }\r\n        else\r\n        {\r\n            result=2;\r\n        }\r\n    }\r\n    if(rollResult==20)\r\n    {\r\n        if(result<3)\r\n        {\r\n            result++;\r\n        }\r\n    }\r\n    if(rollResult==1)\r\n    {\r\n        if(result>0)\r\n        {\r\n            result--;\r\n        }\r\n    }\r\n    let resultArray = new Array('Critical failure', 'Failure','Success','Critical success')\r\n    return \"Targetnumber:\" + targetNumber+\" result of the roll: \"+rollResult+ \"+\" + modifier + \"=\" + (parseInt(rollResult)+parseInt(modifier)) + \" \" + resultArray[result]\r\n  }"]},"metadata":{},"sourceType":"module"}