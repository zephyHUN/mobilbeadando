{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\ne nyuk\\xE1lj\\\\ELTE\\\\mobil\\\\DiceRoller\\\\src\\\\PathfinderScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nvar x = 0;\n\nvar DieRollScreen = function (_Component) {\n  _inherits(DieRollScreen, _Component);\n\n  var _super = _createSuper(DieRollScreen);\n\n  function DieRollScreen() {\n    _classCallCheck(this, DieRollScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DieRollScreen, [{\n    key: \"render\",\n    value: function render() {\n      var navigate = this.props.navigation.navigate;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        style: styles.textInputStyle,\n        numeric: true,\n        placeholder: \"number of dies\",\n        keyboardType: 'numeric',\n        onChangeText: function onChangeText(text) {\n          return x = text;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        title: \"d100\",\n        onPress: function onPress() {\n          return alert(dieRollFunction(x, 100));\n        },\n        color: \"#2b1d0e\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 8\n        }\n      }));\n    }\n  }]);\n\n  return DieRollScreen;\n}(Component);\n\nDieRollScreen.navigationOptions = {\n  title: 'PathFinder'\n};\nexport { DieRollScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#FDF1DC',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  textInputStyle: {\n    width: 250,\n    backgroundColor: 'white',\n    padding: 16\n  },\n  buttonStyle: {\n    margin: '10px'\n  }\n});\n\nfunction dieRollFunction(dieNumber, dieSize) {\n  var rolls = [];\n  var text = '';\n\n  for (var i = 0; i < dieNumber; i++) {\n    rolls.push(Math.floor(Math.random() * dieSize) + 1);\n    text += rolls[i];\n\n    if (i < dieNumber - 1) {\n      text += '+';\n    }\n  }\n\n  var result = 0;\n  rolls.forEach(function (element) {\n    result += parseInt(element);\n  });\n  return \"Result of the rolls:\" + text + '=' + result;\n}","map":{"version":3,"sources":["D:/ne nyukÃ¡lj/ELTE/mobil/DiceRoller/src/PathfinderScreen.js"],"names":["React","Component","x","DieRollScreen","navigate","props","navigation","styles","container","textInputStyle","text","alert","dieRollFunction","navigationOptions","title","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","padding","buttonStyle","margin","dieNumber","dieSize","rolls","i","push","Math","floor","random","result","forEach","element","parseInt"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;AAGA,IAAIC,CAAC,GAAC,CAAN;;IAEqBC,a;;;;;;;;;;;;;6BAIR;AAAA,UACAC,QADA,GACY,KAAKC,KAAL,CAAWC,UADvB,CACAF,QADA;AAEP,aACA,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAED,MAAM,CAACE,cADhB;AAEE,QAAA,OAAO,MAFT;AAGE,QAAA,WAAW,EAAC,gBAHd;AAIE,QAAA,YAAY,EAAE,SAJhB;AAKE,QAAA,YAAY,EAAE,sBAAAC,IAAI;AAAA,iBAAIR,CAAC,GAACQ,IAAN;AAAA,SALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAQC,oBAAC,MAAD;AACK,QAAA,KAAK,EAAC,MADX;AAEK,QAAA,OAAO,EAAE;AAAA,iBAAMC,KAAK,CAACC,eAAe,CAACV,CAAD,EAAG,GAAH,CAAhB,CAAX;AAAA,SAFd;AAGK,QAAA,KAAK,EAAC,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARD,CADA;AAgBD;;;;EAtBsCD,S;;AAAtBE,a,CACVU,iB,GAAoB;AACzBC,EAAAA,KAAK,EAAE;AADkB,C;SADVX,a;AA0BnB,IAAMI,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,SAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BX,EAAAA,cAAc,EAAE;AACdY,IAAAA,KAAK,EAAE,GADO;AAEdH,IAAAA,eAAe,EAAE,OAFH;AAGdI,IAAAA,OAAO,EAAE;AAHK,GAPe;AAa/BC,EAAAA,WAAW,EAAC;AACVC,IAAAA,MAAM,EAAE;AADE;AAbmB,CAAlB,CAAf;;AAkBA,SAASZ,eAAT,CAAyBa,SAAzB,EAAoCC,OAApC,EAA6C;AAC3C,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIjB,IAAI,GAAC,EAAT;;AACA,OAAI,IAAIkB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,SAAf,EAA0BG,CAAC,EAA3B,EACA;AACED,IAAAA,KAAK,CAACE,IAAN,CAAWC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,OAA3B,IAAoC,CAA/C;AACAhB,IAAAA,IAAI,IAAEiB,KAAK,CAACC,CAAD,CAAX;;AACA,QAAGA,CAAC,GAACH,SAAS,GAAC,CAAf,EACA;AACEf,MAAAA,IAAI,IAAE,GAAN;AACD;AACF;;AACD,MAAIuB,MAAM,GAAC,CAAX;AACAN,EAAAA,KAAK,CAACO,OAAN,CAAc,UAAAC,OAAO,EAAI;AACvBF,IAAAA,MAAM,IAAEG,QAAQ,CAACD,OAAD,CAAhB;AACD,GAFD;AAGA,SAAO,yBAAuBzB,IAAvB,GAA4B,GAA5B,GAAgCuB,MAAvC;AACD","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, View, StyleSheet, TextInput  } from \"react-native\";\r\n\r\nlet x=0;\r\n\r\nexport default class DieRollScreen extends Component {\r\n    static navigationOptions = {\r\n      title: 'PathFinder',\r\n    };\r\n    render() {\r\n      const {navigate} = this.props.navigation;\r\n      return (\r\n      <View style={styles.container}>\r\n        <TextInput\r\n          style={styles.textInputStyle}\r\n          numeric\r\n          placeholder=\"number of dies\"\r\n          keyboardType={'numeric'}\r\n          onChangeText={text => x=text}\r\n        />\r\n       <Button\r\n            title=\"d100\"\r\n            onPress={() => alert(dieRollFunction(x,100))}\r\n            color=\"#2b1d0e\"\r\n        />\r\n      </View>\r\n      );\r\n    }\r\n  }\r\n\r\n  \r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#FDF1DC',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    textInputStyle: {\r\n      width: 250,\r\n      backgroundColor: 'white',\r\n      padding: 16,\r\n      \r\n    },\r\n    buttonStyle:{\r\n      margin: '10px'\r\n    }\r\n  });\r\n\r\n  function dieRollFunction(dieNumber, dieSize) {\r\n    let rolls = []\r\n    let text=''\r\n    for(let i=0; i<dieNumber; i++)\r\n    {\r\n      rolls.push(Math.floor(Math.random() * dieSize)+1)\r\n      text+=rolls[i]\r\n      if(i<dieNumber-1)\r\n      {\r\n        text+='+'\r\n      }\r\n    }\r\n    let result=0;\r\n    rolls.forEach(element => {\r\n      result+=parseInt(element);\r\n    });\r\n    return \"Result of the rolls:\"+text+'='+result;\r\n  }"]},"metadata":{},"sourceType":"module"}